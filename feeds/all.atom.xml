<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Rasor's Tech Blog</title><link href="https://rasor.github.io/" rel="alternate"></link><link href="https://rasor.github.io/feeds/all.atom.xml" rel="self"></link><id>https://rasor.github.io/</id><updated>2017-09-29T23:00:00+02:00</updated><entry><title>Ngx: Template for Visual Studio 2017</title><link href="https://rasor.github.io/ngx-template-for-visual-studio-2017.html" rel="alternate"></link><published>2017-09-24T17:00:00+02:00</published><updated>2017-09-24T17:00:00+02:00</updated><author><name>rasor</name></author><id>tag:rasor.github.io,2017-09-24:/ngx-template-for-visual-studio-2017.html</id><summary type="html">&lt;p&gt;At my work all web developers are getting a Angular 4 course.
But there are a couple of issues with that.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When you work with ngx in Visual Studio code you get a .gitnore file from the Angular CLI to take care of what not to commit to GIT.
Since …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;At my work all web developers are getting a Angular 4 course.
But there are a couple of issues with that.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When you work with ngx in Visual Studio code you get a .gitnore file from the Angular CLI to take care of what not to commit to GIT.
Since we are not yet using GIT at work (but TFS), then TFS don't know what to checkin.&lt;/li&gt;
&lt;li&gt;Since the develpers feel more comfortable with VS 2017, then we also have a chance to get control of files to Checkin with a &lt;code&gt;.csproj&lt;/code&gt; file.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So HowTo import a Angular CLI project into VS 2017 on Windows?&lt;/p&gt;
&lt;p&gt;Luckily there is a &lt;code&gt;.vsix&lt;/code&gt; for that: &lt;a href="https://marketplace.visualstudio.com/items?itemName=AndreyFomin.AngularCLIProjectTemplate" target="_blank"&gt;Angular CLI Project Template&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Installation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Install &lt;a href="https://www.visualstudio.com/vs/community/" target="_blank"&gt;VS 2017&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Include web development including TypeScript&lt;/li&gt;
&lt;li&gt;Framework ASP.NET Core 1.1.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Node 6.9.0 or higher (&lt;code&gt;node -v&lt;/code&gt;) - Should come with VS&lt;/li&gt;
&lt;li&gt;Npm 3 or higher (&lt;code&gt;npm -v&lt;/code&gt;) - Should come with VS&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git-scm.com/download/win" target="_blank"&gt;Git for Windows&lt;/a&gt; (&lt;code&gt;git -version&lt;/code&gt;) - Should come with VS &lt;/li&gt;
&lt;li&gt;Install latest &lt;a href="https://www.npmjs.com/package/@angular/cli/tutorial" target="_blank"&gt;Angular CLI&lt;/a&gt; (&lt;code&gt;ng version&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Exit VisualStudio&lt;/li&gt;
&lt;li&gt;Install &lt;a href="https://marketplace.visualstudio.com/items?itemName=AndreyFomin.AngularCLIProjectTemplate" target="_blank"&gt;Angular CLI Project Template&lt;/a&gt; by executing the &lt;code&gt;.vsix&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Ready-Set-Go&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Start VisualStudio&lt;/li&gt;
&lt;li&gt;New - Project - Other Languages - TypeScript - Angular CLI Application - Name: &lt;YourNgAppName&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="picture alt" src="img/2017-09-24-NewAngularCLIProject.PNG" title="New Angular CLI Project in Visual Studio 2017"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In the project options choises select both if you are in doubt&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="picture alt" src="img/2017-09-24-AngularCLIProjectOptions.PNG" title="Angular CLI Project options"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Installing the npm packages takes a long time. I prefer to skip that step and do it manually from a command prompt, where I feel I better can see what is going on, if something fails&lt;ul&gt;
&lt;li&gt;Open a command prompt and CD into the root of your Angular project&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm install # install all the node_modules found in package.json&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now start the app with F5&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;VS 2017 will read .\properties\launchsettings.json&lt;ul&gt;
&lt;li&gt;If you started IIS Express, then VS will start dotnet.exe on &lt;a href="http://localhost:58162/"&gt;http://localhost:58162/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;If you started &lt;yourapp&gt;, then VS will start dotnet.exe on &lt;a href="http://localhost:58163/"&gt;http://localhost:58163/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="picture alt" src="img/2017-09-24-F5Startup1.PNG" title="F5 startup 1"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In both cases Angular CLI will serve you app after buiding it with the Angular CLI on &lt;a href="http://localhost:4200/"&gt;http://localhost:4200/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="picture alt" src="img/2017-09-24-F5Startup2.PNG" title="F5 startup 2"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This is very good news. Why? Because it does not matter what webserver or editor you are using.
But the best of is that you use standard node.js deployment methods, so you can deploy your app anywhere. You can use standard npm or yarn managers without having to do a lot of strange Visual Studio configuration.&lt;/li&gt;
&lt;li&gt;You can now stop F5 debugging.&lt;/li&gt;
&lt;li&gt;Instead start a webserver manually from a command prompt (in the root of your project) with &lt;code&gt;ng serve&lt;/code&gt;
Now you can see that it is Angular CLI (via .angular-cli.json) that in both cases uses webpack to build packages (via \src\tsconfig.app.json) to serve once again on &lt;a href="http://localhost:4200/"&gt;http://localhost:4200/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Press Ctrl-C to stop the webserver&lt;/li&gt;
&lt;li&gt;Checkin your code using your favorite VCS (e.g. TFS or GIT)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/@angular/cli/" target="_blank"&gt;@angular/cli&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The End&lt;/p&gt;</content><category term="#ngx"></category><category term="#typescript"></category><category term="#visualstudio"></category><category term="#tfs"></category></entry><entry><title>Using Pelican blog on Github pages</title><link href="https://rasor.github.io/using-pelican-blog-on-github-pages.html" rel="alternate"></link><published>2017-09-23T20:20:00+02:00</published><updated>2017-09-29T23:00:00+02:00</updated><author><name>rasor</name></author><id>tag:rasor.github.io,2017-09-23:/using-pelican-blog-on-github-pages.html</id><summary type="html">&lt;p&gt;I had some reasons for moving a blog from Wordpress to GitHubPages. You can read about reason, pro and cons &lt;a href="https://rasor.github.io/welcome-to-my-pelican-blog-on-github-pages.html" target="_blank"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In this blog I setup a &lt;a href="http://docs.getpelican.com/en/stable/quickstart.html" target="_blank"&gt;Pelican blog site&lt;/a&gt; from Windows and host it on &lt;a href="https://pages.github.com/" target="_blank"&gt;GitHub Pages&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;HowTo&lt;/h2&gt;
&lt;h3&gt;Installation - Prerequisites&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Install &lt;a href="https://www.python.org/downloads/" target="_blank"&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Create an account at &lt;a href="https://github.com"&gt;https://github.com …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;I had some reasons for moving a blog from Wordpress to GitHubPages. You can read about reason, pro and cons &lt;a href="https://rasor.github.io/welcome-to-my-pelican-blog-on-github-pages.html" target="_blank"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In this blog I setup a &lt;a href="http://docs.getpelican.com/en/stable/quickstart.html" target="_blank"&gt;Pelican blog site&lt;/a&gt; from Windows and host it on &lt;a href="https://pages.github.com/" target="_blank"&gt;GitHub Pages&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;HowTo&lt;/h2&gt;
&lt;h3&gt;Installation - Prerequisites&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Install &lt;a href="https://www.python.org/downloads/" target="_blank"&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Create an account at &lt;a href="https://github.com"&gt;https://github.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;On Windows: Install &lt;a href="https://git-scm.com/download/win" target="_blank"&gt;Git for Windows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Installation - Pelican&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;As admin:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pip install pelican markdown&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Create a folder for the Pelican source&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MKDIR username.github.io&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CD username.github.io&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Create a pelican site following &lt;a href="http://docs.getpelican.com/en/stable/quickstart.html"&gt;http://docs.getpelican.com/en/stable/quickstart.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pelican-quickstart&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;Do you want to specify URL prefix? Answer https://username.github.io&lt;/li&gt;
&lt;li&gt;Do you want to upload using xxx? Answer N untill the xxx = GitHub Pages&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Create some content&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Create a blog e.g &lt;code&gt;~/content/yourcategoryno1/myfirstblog.md&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Preview content&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pelican content&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd output&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;python -m pelican.server&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Browse to  &lt;a href="http://localhost:8000/"&gt;http://localhost:8000/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;On Windows - in root create a file called &lt;a href="https://github.com/rasor/rasor.github.io/blob/pelican/serve.bat" target="_blank"&gt;serve.bat&lt;/a&gt; with the content:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pelican content
&lt;span class="nb"&gt;cd&lt;/span&gt; output
start &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://localhost:8000/&amp;quot;&lt;/span&gt;
python -m pelican.server
REM Ctrl-C to quit
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;... then you can pre-view your content with &lt;code&gt;.\serve&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Images&lt;ul&gt;
&lt;li&gt;In &lt;code&gt;pelicanconf.py&lt;/code&gt; add line &lt;code&gt;STATIC_PATHS = ['img', 'pdf']&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Create an image e.g &lt;code&gt;~/content/img/hello.png&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Link to the file with
&lt;code&gt;![picture alt](img/hello.png "Mickey Mouse")&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Links&lt;ul&gt;
&lt;li&gt;External: &lt;code&gt;[link desc](https://blog.getpelican.com/){:target="_blank"}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Internal: &lt;code&gt;[link desc]({filename}/yourcategoryno1/myfirstblog.md){:target="_blank"}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Optionally edit more settings in &lt;code&gt;pelicanconf.py&lt;/code&gt; - see &lt;a href="http://docs.getpelican.com/en/3.7.1/settings.html"&gt;http://docs.getpelican.com/en/3.7.1/settings.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;add a &lt;code&gt;favicon.ico&lt;/code&gt; to root&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Prepare GIT as VersionControlSystem&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Fetch &lt;code&gt;.gitignore&lt;/code&gt;from &lt;a href="https://github.com/getpelican/pelican-blog/blob/master/.gitignore"&gt;https://github.com/getpelican/pelican-blog/blob/master/.gitignore&lt;/a&gt; - save it to root&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;~/README.md&lt;/code&gt; - just for the source branch&lt;/li&gt;
&lt;li&gt;Install publich tool&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pip install ghp-import&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Create local git repo&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git init&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Create a remote repo via github.com for your github page build in GitHub. Call it &lt;code&gt;username.github.io&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Connect to repo and print remote repo&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git remote add origin https://github.com/rasor/rasor.github.io.git&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git remote -v&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Create new branch for the pelican source&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git checkout -b pelican&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Deploy you blog&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;(Foreach) Commit source&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git add .&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git commit -a -m "Initial commit"&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push -u origin pelican&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(Foreach) &lt;a href="http://docs.getpelican.com/en/3.7.1/tips.html#publishing-to-github" target="_blank"&gt;Publish&lt;/a&gt; build to master then publish&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pelican content -o output -s pelicanconf.py&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ghp-import output -r origin -b master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push origin master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout pelican&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;On Windows - in root create a file called &lt;a href="https://github.com/rasor/rasor.github.io/blob/pelican/publish.bat" target="_blank"&gt;publish.bat&lt;/a&gt; with the content:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add .
git commit -a -m %1
git push -u origin pelican
pelican content -o output -s pelicanconf.py
ghp-import output -r origin -b master
git push origin master
git checkout pelican
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;... then you can publish by &lt;code&gt;.\publish "some comment"&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Editor&lt;/h2&gt;
&lt;p&gt;I'm using Visual Studio Code, that has a nice Markdown preview - probably a plugin.
But you could use NotePad for that matter.&lt;/p&gt;
&lt;p&gt;&lt;img alt="picture alt" src="img/2017-09-23-PelicanInVSCode.PNG" title="Pelican In VS Code"&gt;&lt;/p&gt;
&lt;h2&gt;Day to day Workflow&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Open VS Code&lt;/li&gt;
&lt;li&gt;Open VS Code terminal 1 - T1&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.\serve&lt;/code&gt; &lt;a href="https://github.com/rasor/rasor.github.io/blob/pelican/serve.bat"&gt;#code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A browser opens and navigates to http://localhost:8000&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Add a new .md file in \content\ and add some content&lt;/li&gt;
&lt;li&gt;Open VS Code terminal 2 - T2&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.\build&lt;/code&gt; &lt;a href="https://github.com/rasor/rasor.github.io/blob/pelican/build.bat"&gt;#code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;F5 - refresh browser to see the new content&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.\publish "file new.md published"&lt;/code&gt; &lt;a href="https://github.com/rasor/rasor.github.io/blob/pelican/publish.bat"&gt;#code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Browse to https://rasor.github.io&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Installation - Plugins and Themes&lt;/h2&gt;
&lt;p&gt;Plugins and Themes are two seperate repos being used by some themes.
To be able to reach them from &lt;code&gt;pelicanconf.py&lt;/code&gt; is best to clone them to place with an absolute path.&lt;/p&gt;
&lt;p&gt;Since preference will differ I will put part of the path in system-wide environment variables&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SystemPropertiesAdvanced.exe&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;Environment Variables – System vars – New&lt;/li&gt;
&lt;li&gt;Name: &lt;code&gt;PYTHON_HOME&lt;/code&gt;, Value: &lt;code&gt;C:\ProgramFilesExtra\Python\Python36-32&lt;/code&gt; – OK - OK (Use the path to Python installed in top of this blog)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Start new cmd promt (this will load the new environment variable&lt;/li&gt;
&lt;li&gt;Create a folder for the cloned repos:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;c:
&lt;span class="nb"&gt;cd&lt;/span&gt; %PYTHON_HOME%
md pelican-addon-clones
&lt;span class="nb"&gt;cd&lt;/span&gt; pelican-addon-clones
git clone --recursive https://github.com/getpelican/pelican-plugins
git clone --recursive https://github.com/getpelican/pelican-themes
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Optional continue with heading &lt;a href="{filename}/2017/2017-09-24A-PelicanThemes.md"&gt;Installation of themes and plugins&lt;/a&gt; to install a specific theme&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Links&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pages.github.com/" target="_blank"&gt;Create a repo for your github page site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.getpelican.com/en/stable/publish.html"&gt;http://docs.getpelican.com/en/stable/publish.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.pelicanthemes.com/"&gt;http://www.pelicanthemes.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.getpelican.com/en/stable/pelican-themes.html"&gt;http://docs.getpelican.com/en/stable/pelican-themes.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.getpelican.com/en/3.6.3/content.html#linking-to-static-files"&gt;http://docs.getpelican.com/en/3.6.3/content.html#linking-to-static-files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tchapi/markdown-cheatsheet"&gt;https://github.com/tchapi/markdown-cheatsheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pythonhosted.org/Markdown/reference.html"&gt;http://pythonhosted.org/Markdown/reference.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.getpelican.com/en/stable/faq.html"&gt;http://docs.getpelican.com/en/stable/faq.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.getpelican.com/"&gt;https://blog.getpelican.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://help.github.com/articles/about-supported-custom-domains/"&gt;https://help.github.com/articles/about-supported-custom-domains/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Another &lt;a href="https://www.fullstackpython.com/blog/generating-static-websites-pelican-jinja2-markdown.html" target="_blank"&gt;install Pelican blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/getpelican" target="_blank"&gt;Pelican on Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rasor.wordpress.com/" target="_blank"&gt;My old Wordpress blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The End&lt;/p&gt;</content><category term="#blog"></category><category term="#pelican"></category><category term="#githubpages"></category><category term="#cms"></category><category term="#git"></category><category term="#Install"></category></entry><entry><title>Welcome to my Pelican blog on Github pages</title><link href="https://rasor.github.io/welcome-to-my-pelican-blog-on-github-pages.html" rel="alternate"></link><published>2017-09-23T20:00:00+02:00</published><updated>2017-09-24T09:00:00+02:00</updated><author><name>rasor</name></author><id>tag:rasor.github.io,2017-09-23:/welcome-to-my-pelican-blog-on-github-pages.html</id><summary type="html">&lt;p&gt;Hi there.&lt;/p&gt;
&lt;p&gt;I have moved. Previously I was living on &lt;a href="https://rasor.wordpress.com/"&gt;https://rasor.wordpress.com/&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Reason for move&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;I wanted Mardown markup&lt;/li&gt;
&lt;li&gt;I wanted better &lt;a href="http://docs.getpelican.com/en/stable/content.html#syntax-highlighting" target="_blank"&gt;syntax highligting&lt;/a&gt; for code&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Pro and Cons compared to Wordpress&lt;/h2&gt;
&lt;h3&gt;Pros&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;I got an easier way of editing categories and tags&lt;ul&gt;
&lt;li&gt;Categories: In your content folder …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Hi there.&lt;/p&gt;
&lt;p&gt;I have moved. Previously I was living on &lt;a href="https://rasor.wordpress.com/"&gt;https://rasor.wordpress.com/&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Reason for move&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;I wanted Mardown markup&lt;/li&gt;
&lt;li&gt;I wanted better &lt;a href="http://docs.getpelican.com/en/stable/content.html#syntax-highlighting" target="_blank"&gt;syntax highligting&lt;/a&gt; for code&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Pro and Cons compared to Wordpress&lt;/h2&gt;
&lt;h3&gt;Pros&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;I got an easier way of editing categories and tags&lt;ul&gt;
&lt;li&gt;Categories: In your content folder you create a subfolder for each tag and you store your .md file in there.&lt;/li&gt;
&lt;li&gt;Tags: You just write them inside your .md&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;You own your content and have a local copy of it&lt;/li&gt;
&lt;li&gt;Your content is very easy to move to somehwere else, since you have a local copy on your PC&lt;/li&gt;
&lt;li&gt;Updates to a blog has its own field e.g. Modified: 2017-09-24 09:00&lt;/li&gt;
&lt;li&gt;An &lt;a href="http://docs.getpelican.com/en/stable/importer.html"&gt;importer&lt;/a&gt; exists&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Cons&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;No central editing of tags - well that is a releaf, because it was cumbersome to add one, when you in the middle of editing in Wordpress&lt;/li&gt;
&lt;li&gt;No img size editing tool&lt;/li&gt;
&lt;li&gt;You need to be used to work with GIT and a command promt&lt;/li&gt;
&lt;li&gt;Preview of markup is only instantly, if your editor supports it. Same goes for WYSIWIG editor.&lt;/li&gt;
&lt;li&gt;Setting up to be published in GitHupPages was not described well, so I had to create a &lt;a href="https://rasor.github.io/using-pelican-blog-on-github-pages.html"&gt;procedure&lt;/a&gt; myself. I am quite pleased with the workflow now. Not too much hazzle, when you are working with code and a terminal anyway.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Links&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rasor.wordpress.com/2017/04/15/markdown-saas-blogs/"&gt;Thinking about moving&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The end&lt;/p&gt;</content><category term="#blog"></category><category term="#pelican"></category><category term="#githubpages"></category><category term="#cms"></category></entry></feed>